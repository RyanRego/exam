library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;


entity modN_counter is

generic(n: integer := 128);

port(
clk : in STD_LOGIC;
reset : in STD_LOGIC;
dout : out STD_LOGIC_VECTOR(6 downto 0)
         );
end modN_counter;


architecture A_modN of modN_counter is
signal temp:std_logic_vector(22 downto 0);  
signal sclk:std_logic;



begin

p11: process(clk,reset)
	begin
	if(reset='1')then temp<=(others=>'0');
		elsif(clk'event and clk='1') then
		temp<= temp + 1;
		end if;
	end process;
	sclk<=temp(22);


counter : process (sclk,reset) is

	 variable m : integer range 0 to (n-1) := 0;
    begin
        if (reset='1') then
m := 0;
        --elsif (rising_edge (clk)) then
		elsif(sclk'event and sclk='1') then
m := m + 1;
        end if;
        if (m=(n)) then
m := 0;
        end if;
dout<= conv_std_logic_vector (m,7);
    end process counter;

end A_modN;




TESTBENCH

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY MOD_TB IS
END MOD_TB;
 
ARCHITECTURE behavior OF MOD_TB IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT modN_counter
    PORT(
         clk : IN  std_logic;
         reset : IN  std_logic;
         dout : OUT  std_logic_vector(6 downto 0)
        );
    END COMPONENT;
    

   --Inputs
   signal clk : std_logic := '0';
   signal reset : std_logic := '0';

 	--Outputs
   signal dout : std_logic_vector(6 downto 0);

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: modN_counter PORT MAP (
          clk => clk,
          reset => reset,
          dout => dout
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
      --wait for 100 ns;	
     reset<='1';
	  wait for 10 ns;	
	  reset<='0';
     
      -- insert stimulus here 

      wait;
   end process;

END;
